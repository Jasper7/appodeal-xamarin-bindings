using System;
using CoreFoundation;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace AppodealBinding
{
	[Static]
	partial interface AppodealUnitSize
	{
		// extern NSString *const _Nonnull kAPDBuildIdendtifier;
		[Field("kAPDBuildIdendtifier", "__Internal")]
		NSString kAPDBuildIdendtifier { get; }

        // extern const APDUnitSize kAppodealUnitSize_320x50;
        [Field("kAppodealUnitSize_320x50", "__Internal")]
		CGSize kAppodealUnitSize_320x50 { get; }

        //// extern const APDUnitSize kAppodealUnitSize_728x90;
        [Field("kAppodealUnitSize_728x90", "__Internal")]
		CGSize kAppodealUnitSize_728x90 { get; }
    }

	// @protocol AppodealBannerDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealBannerDelegate
	{
		// @optional -(void)bannerDidLoadAdIsPrecache:(BOOL)precache;
		[Export("bannerDidLoadAdIsPrecache:")]
		void BannerDidLoadAdIsPrecache(bool precache);

		// @optional -(void)bannerDidFailToLoadAd;
		[Export("bannerDidFailToLoadAd")]
		void BannerDidFailToLoadAd();

		// @optional -(void)bannerDidExpired;
		[Export("bannerDidExpired")]
		void BannerDidExpired();

		// @optional -(void)bannerDidClick;
		[Export("bannerDidClick")]
		void BannerDidClick();

		// @optional -(void)bannerDidShow;
		[Export("bannerDidShow")]
		void BannerDidShow();
	}

	// @protocol AppodealInterstitialDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealInterstitialDelegate
	{
		// @optional -(void)interstitialDidLoadAdIsPrecache:(BOOL)precache;
		[Export("interstitialDidLoadAdIsPrecache:")]
		void InterstitialDidLoadAdIsPrecache(bool precache);

		// @optional -(void)interstitialDidFailToLoadAd;
		[Export("interstitialDidFailToLoadAd")]
		void InterstitialDidFailToLoadAd();

		// @optional -(void)interstitialDidExpired;
		[Export("interstitialDidExpired")]
		void InterstitialDidExpired();

		// @optional -(void)interstitialDidFailToPresent;
		[Export("interstitialDidFailToPresent")]
		void InterstitialDidFailToPresent();

		// @optional -(void)interstitialWillPresent;
		[Export("interstitialWillPresent")]
		void InterstitialWillPresent();

		// @optional -(void)interstitialDidDismiss;
		[Export("interstitialDidDismiss")]
		void InterstitialDidDismiss();

		// @optional -(void)interstitialDidClick;
		[Export("interstitialDidClick")]
		void InterstitialDidClick();
	}

	// @protocol AppodealRewardedVideoDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealRewardedVideoDelegate
	{
		// @optional -(void)rewardedVideoDidLoadAdIsPrecache:(BOOL)precache;
		[Export("rewardedVideoDidLoadAdIsPrecache:")]
		void RewardedVideoDidLoadAdIsPrecache(bool precache);

		// @optional -(void)rewardedVideoDidFailToLoadAd;
		[Export("rewardedVideoDidFailToLoadAd")]
		void RewardedVideoDidFailToLoadAd();

		// @optional -(void)rewardedVideoDidExpired;
		[Export("rewardedVideoDidExpired")]
		void RewardedVideoDidExpired();

		// @optional -(void)rewardedVideoDidFailToPresentWithError:(NSError * _Nonnull)error;
		[Export("rewardedVideoDidFailToPresentWithError:")]
		void RewardedVideoDidFailToPresentWithError(NSError error);

		// @optional -(void)rewardedVideoDidPresent;
		[Export("rewardedVideoDidPresent")]
		void RewardedVideoDidPresent();

		// @optional -(void)rewardedVideoWillDismissAndWasFullyWatched:(BOOL)wasFullyWatched;
		[Export("rewardedVideoWillDismissAndWasFullyWatched:")]
		void RewardedVideoWillDismissAndWasFullyWatched(bool wasFullyWatched);

		// @optional -(void)rewardedVideoDidFinish:(float)rewardAmount name:(NSString * _Nullable)rewardName;
		[Export("rewardedVideoDidFinish:name:")]
		void RewardedVideoDidFinish(float rewardAmount, [NullAllowed] string rewardName);

		// @optional -(void)rewardedVideoDidClick;
		[Export("rewardedVideoDidClick")]
		void RewardedVideoDidClick();
	}

	// @protocol AppodealNonSkippableVideoDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealNonSkippableVideoDelegate
	{
		// @optional -(void)nonSkippableVideoDidLoadAdIsPrecache:(BOOL)precache;
		[Export("nonSkippableVideoDidLoadAdIsPrecache:")]
		void NonSkippableVideoDidLoadAdIsPrecache(bool precache);

		// @optional -(void)nonSkippableVideoDidFailToLoadAd;
		[Export("nonSkippableVideoDidFailToLoadAd")]
		void NonSkippableVideoDidFailToLoadAd();

		// @optional -(void)nonSkippableVideoDidExpired;
		[Export("nonSkippableVideoDidExpired")]
		void NonSkippableVideoDidExpired();

		// @optional -(void)nonSkippableVideoDidPresent;
		[Export("nonSkippableVideoDidPresent")]
		void NonSkippableVideoDidPresent();

		// @optional -(void)nonSkippableVideoDidFailToPresentWithError:(NSError * _Nonnull)error;
		[Export("nonSkippableVideoDidFailToPresentWithError:")]
		void NonSkippableVideoDidFailToPresentWithError(NSError error);

		// @optional -(void)nonSkippableVideoWillDismissAndWasFullyWatched:(BOOL)wasFullyWatched;
		[Export("nonSkippableVideoWillDismissAndWasFullyWatched:")]
		void NonSkippableVideoWillDismissAndWasFullyWatched(bool wasFullyWatched);

		// @optional -(void)nonSkippableVideoDidFinish;
		[Export("nonSkippableVideoDidFinish")]
		void NonSkippableVideoDidFinish();

		// @optional -(void)nonSkippableVideoDidClick;
		[Export("nonSkippableVideoDidClick")]
		void NonSkippableVideoDidClick();
	}

	// @protocol AppodealNativeAdDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealNativeAdDelegate
	{
		// @required -(void)didLoadNativeAds:(NSInteger)count;
		[Abstract]
		[Export("didLoadNativeAds:")]
		void DidLoadNativeAds(nint count);

		// @required -(void)didFailToLoadNativeAdsWithError:(NSError * _Nonnull)error;
		[Abstract]
		[Export("didFailToLoadNativeAdsWithError:")]
		void DidFailToLoadNativeAdsWithError(NSError error);
	}

	// @protocol APDActivityDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDActivityDelegate
	{
		// @required -(void)didReceiveActivityLog:(APDActivityLog * _Nonnull)activityLog;
		[Abstract]
		[Export("didReceiveActivityLog:")]
		void DidReceiveActivityLog(NSObject activityLog);
	}

	partial interface Constants
	{
		// extern NSString *const _Nonnull kAPDAppsFlyerIdExtrasKey;
		[Field("kAPDAppsFlyerIdExtrasKey", "__Internal")]
		NSString kAPDAppsFlyerIdExtrasKey { get; }

		// extern NSString *const _Nonnull kAPDMRAIDJSTagNetworkName;
		[Field("kAPDMRAIDJSTagNetworkName", "__Internal")]
		NSString kAPDMRAIDJSTagNetworkName { get; }

		// extern NSString *const _Nonnull kAPDTapsenseNetworkName;
		[Field("kAPDTapsenseNetworkName", "__Internal")]
		NSString kAPDTapsenseNetworkName { get; }

		// extern NSString *const _Nonnull kAPDInnerActiveNetworkName;
		[Field("kAPDInnerActiveNetworkName", "__Internal")]
		NSString kAPDInnerActiveNetworkName { get; }

		// extern NSString *const _Nonnull kAPDSmaatoNetworkName;
		[Field("kAPDSmaatoNetworkName", "__Internal")]
		NSString kAPDSmaatoNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAppNexusNetworkName;
		[Field("kAPDAppNexusNetworkName", "__Internal")]
		NSString kAPDAppNexusNetworkName { get; }

		// extern NSString *const _Nonnull kAPDOpenXNetworkName;
		[Field("kAPDOpenXNetworkName", "__Internal")]
		NSString kAPDOpenXNetworkName { get; }

		// extern NSString *const _Nonnull kAPDVungleNetworkName;
		[Field("kAPDVungleNetworkName", "__Internal")]
		NSString kAPDVungleNetworkName { get; }

		// extern NSString *const _Nonnull kAPDUnityNetworkName;
		[Field("kAPDUnityNetworkName", "__Internal")]
		NSString kAPDUnityNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAdColonyNetworkName;
		[Field("kAPDAdColonyNetworkName", "__Internal")]
		NSString kAPDAdColonyNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAmazonNetworkName;
		[Field("kAPDAmazonNetworkName", "__Internal")]
		NSString kAPDAmazonNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAppLovinNetworkName;
		[Field("kAPDAppLovinNetworkName", "__Internal")]
		NSString kAPDAppLovinNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAvocarrotNetworkName;
		[Field("kAPDAvocarrotNetworkName", "__Internal")]
		NSString kAPDAvocarrotNetworkName { get; }

		// extern NSString *const _Nonnull kAPDChartboostNetworkName;
		[Field("kAPDChartboostNetworkName", "__Internal")]
		NSString kAPDChartboostNetworkName { get; }

		// extern NSString *const _Nonnull kAPDFacebookNetworkName;
		[Field("kAPDFacebookNetworkName", "__Internal")]
		NSString kAPDFacebookNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAdMobNetworkName;
		[Field("kAPDAdMobNetworkName", "__Internal")]
		NSString kAPDAdMobNetworkName { get; }

		// extern NSString *const _Nonnull kAPDMyTargetNetworkName;
		[Field("kAPDMyTargetNetworkName", "__Internal")]
		NSString kAPDMyTargetNetworkName { get; }

		// extern NSString *const _Nonnull kAPDMoPubNetworkName;
		[Field("kAPDMoPubNetworkName", "__Internal")]
		NSString kAPDMoPubNetworkName { get; }

		// extern NSString *const _Nonnull kAPDPubnativeNetworkName;
		[Field("kAPDPubnativeNetworkName", "__Internal")]
		NSString kAPDPubnativeNetworkName { get; }

		// extern NSString *const _Nonnull kAPDStartAppNetworkName;
		[Field("kAPDStartAppNetworkName", "__Internal")]
		NSString kAPDStartAppNetworkName { get; }

		// extern NSString *const _Nonnull kAPDYandexNetworkName;
		[Field("kAPDYandexNetworkName", "__Internal")]
		NSString kAPDYandexNetworkName { get; }

		// extern NSString *const _Nonnull kAPDMillenialNetworkName;
		[Field("kAPDMillenialNetworkName", "__Internal")]
		NSString kAPDMillenialNetworkName { get; }

		// extern NSString *const _Nonnull kAPDTapjoyNetworkName;
		[Field("kAPDTapjoyNetworkName", "__Internal")]
		NSString kAPDTapjoyNetworkName { get; }

		// extern NSString *const _Nonnull kAPDZplayNetworkName;
		[Field("kAPDZplayNetworkName", "__Internal")]
		NSString kAPDZplayNetworkName { get; }

		// extern NSString *const _Nonnull kAPDInMobiNetworkName;
		[Field("kAPDInMobiNetworkName", "__Internal")]
		NSString kAPDInMobiNetworkName { get; }

		// extern NSString *const _Nonnull kAPDIronSourceNetworkName;
		[Field("kAPDIronSourceNetworkName", "__Internal")]
		NSString kAPDIronSourceNetworkName { get; }

		// extern NSString *const _Nonnull kAPDAppnextNetworkName;
		[Field("kAPDAppnextNetworkName", "__Internal")]
		NSString kAPDAppnextNetworkName { get; }

		// extern NSString *const _Nonnull kAPDCheetahNetworkName;
		[Field("kAPDCheetahNetworkName", "__Internal")]
		NSString kAPDCheetahNetworkName { get; }

		// extern NSString *const _Nonnull kAPDRevMobNetworkName;
		[Field("kAPDRevMobNetworkName", "__Internal")]
		NSString kAPDRevMobNetworkName { get; }

		// extern NSString *const _Nonnull kAPDMintegralNetworkName;
		[Field("kAPDMintegralNetworkName", "__Internal")]
		NSString kAPDMintegralNetworkName { get; }

		// extern NSString *const _Nonnull kAPDIVengoNetworkName;
		[Field("kAPDIVengoNetworkName", "__Internal")]
		NSString kAPDIVengoNetworkName { get; }

		// extern NSString *const _Nonnull kAPDOguryNetworkName;
		[Field("kAPDOguryNetworkName", "__Internal")]
		NSString kAPDOguryNetworkName { get; }

		// extern NSString *const _Nonnull kAPDBidMachineNetworkName;
		[Field("kAPDBidMachineNetworkName", "__Internal")]
		NSString kAPDBidMachineNetworkName { get; }

		// extern const CGSize kAPDAdSize320x50;
		[Field("kAPDAdSize320x50", "__Internal")]
		CGSize kAPDAdSize320x50 { get; }

		// extern const CGSize kAPDAdSize728x90;
		[Field("kAPDAdSize728x90", "__Internal")]
		CGSize kAPDAdSize728x90 { get; }

		// extern const CGSize kAPDAdSize300x250;
		[Field("kAPDAdSize300x250", "__Internal")]
		CGSize kAPDAdSize300x250 { get; }

		// extern const CGSize kAPDImageSizeUndefined;
		[Field("kAPDImageSizeUndefined", "__Internal")]
		CGSize kAPDImageSizeUndefined { get; }

		// extern NSString *const _Nonnull kAPDErrorDomain;
		[Field("kAPDErrorDomain", "__Internal")]
		NSString kAPDErrorDomain { get; }
	}

	// @protocol APDBannerViewDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDBannerViewDelegate
	{
		// @optional -(void)bannerViewDidLoadAd:(APDBannerView * _Nonnull)bannerView isPrecache:(BOOL)precache;
		[Export("bannerViewDidLoadAd:isPrecache:")]
		void BannerViewDidLoadAd(APDBannerView bannerView, bool precache);

		// @optional -(void)bannerView:(APDBannerView * _Nonnull)bannerView didFailToLoadAdWithError:(NSError * _Nonnull)error;
		[Export("bannerView:didFailToLoadAdWithError:")]
		void BannerView(APDBannerView bannerView, NSError error);

		// @optional -(void)bannerViewDidInteract:(APDBannerView * _Nonnull)bannerView;
		[Export("bannerViewDidInteract:")]
		void BannerViewDidInteract(APDBannerView bannerView);

		// @optional -(void)bannerViewDidShow:(APDBannerView * _Nonnull)bannerView;
		[Export("bannerViewDidShow:")]
		void BannerViewDidShow(APDBannerView bannerView);

		// @optional -(void)bannerViewExpired:(APDBannerView * _Nonnull)bannerView;
		[Export("bannerViewExpired:")]
		void BannerViewExpired(APDBannerView bannerView);
	}

	// @interface APDBannerView : UIView
	[BaseType(typeof(UIView))]
	interface APDBannerView
	{
		[Wrap("WeakDelegate")]
		[NullAllowed]
		APDBannerViewDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<APDBannerViewDelegate> _Nullable delegate __attribute__((iboutlet));
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, weak) UIViewController * _Nullable rootViewController __attribute__((iboutlet));
		[NullAllowed, Export("rootViewController", ArgumentSemantic.Weak)]
		UIViewController RootViewController { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable placement;
		[NullAllowed, Export("placement")]
		string Placement { get; set; }

		// @property (assign, nonatomic) BOOL usesSmartSizing;
		[Export("usesSmartSizing")]
		bool UsesSmartSizing { get; set; }

		// @property (assign, nonatomic) BOOL autocache;
		[Export("autocache")]
		bool Autocache { get; set; }

		// @property (assign, nonatomic) APDUnitSize adSize;
		[Export("adSize", ArgumentSemantic.Assign)]
		CGSize AdSize { get; set; }

		// @property (assign, nonatomic) UIViewAnimationOptions refreshAnimation;
		[Export("refreshAnimation", ArgumentSemantic.Assign)]
		UIViewAnimationOptions RefreshAnimation { get; set; }

		// @property (assign, nonatomic) BOOL backgroundVisible __attribute__((deprecated("This property is deprecated and will be removed in next release")));
		[Export("backgroundVisible")]
		bool BackgroundVisible { get; set; }

		// @property (readonly, assign, nonatomic) double predictedEcpm;
		[Export("predictedEcpm")]
		double PredictedEcpm { get; }

		// @property (nonatomic, weak) APDSdk * _Nullable customSdk;
		[NullAllowed, Export("customSdk", ArgumentSemantic.Weak)]
		APDSdk CustomSdk { get; set; }

		// @property (readonly, getter = isReady, assign, nonatomic) BOOL ready;
		[Export("ready")]
		bool Ready { [Bind("isReady")] get; }

		// +(instancetype _Nonnull)bannerViewWithSize:(CGSize)adSize rootViewController:(UIViewController * _Nonnull)rootViewController sdk:(APDSdk * _Nullable)sdk delegate:(id<APDBannerViewDelegate> _Nullable)delegate autocache:(BOOL)autocache;
		[Static]
		[Export("bannerViewWithSize:rootViewController:sdk:delegate:autocache:")]
		APDBannerView BannerViewWithSize(CGSize adSize, UIViewController rootViewController, [NullAllowed] APDSdk sdk, [NullAllowed] APDBannerViewDelegate @delegate, bool autocache);

		// -(instancetype _Nonnull)initWithSize:(APDUnitSize)adSize;
		[Export("initWithSize:")]
		IntPtr Constructor(CGSize adSize);

		// -(instancetype _Nonnull)initWithSize:(APDUnitSize)adSize rootViewController:(UIViewController * _Nonnull)rootViewController;
		[Export("initWithSize:rootViewController:")]
		IntPtr Constructor(CGSize adSize, UIViewController rootViewController);

		// -(void)loadAd;
		[Export("loadAd")]
		void LoadAd();

		// -(void)rotateToOrientation:(UIInterfaceOrientation)orientation __attribute__((deprecated("This method is deprecated and will be removed in future release")));
		[Export("rotateToOrientation:")]
		void RotateToOrientation(UIInterfaceOrientation orientation);
	}

	// @protocol AppodealBannerViewDelegate <APDBannerViewDelegate>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface AppodealBannerViewDelegate 
	{
	}

	// @interface APDActivityLog : NSObject <NSCopying>
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface APDActivityLog : INSCopying
	{
		// @property (readonly, assign, nonatomic) APDActivityType activityType;
		[Export("activityType", ArgumentSemantic.Assign)]
		APDActivityType ActivityType { get; }

		// @property (readonly, assign, nonatomic) APDAdType adType;
		[Export("adType", ArgumentSemantic.Assign)]
		APDAdType AdType { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull adNetwork;
		[Export("adNetwork")]
		string AdNetwork { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable message;
		[NullAllowed, Export("message")]
		string Message { get; }
	}

	// @interface APDImage : NSObject
	[BaseType(typeof(NSObject))]
	interface APDImage
	{
		// @property (assign, nonatomic) CGSize size __attribute__((deprecated("This getter is deprecated and will be removed in next release")));
		[Export("size", ArgumentSemantic.Assign)]
		CGSize Size { get; set; }

		// @property (readonly, nonatomic, strong) NSURL * _Nonnull url;
		[Export("url", ArgumentSemantic.Strong)]
		NSUrl Url { get; }
	}


	// @protocol APDInterstitalAdDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDInterstitalAdDelegate
	{
		// @optional -(void)interstitialAdDidLoad:(APDInterstitialAd * _Nonnull)interstitialAd isPrecache:(BOOL)isPrecache;
		[Export("interstitialAdDidLoad:isPrecache:")]
		void InterstitialAdDidLoad(APDInterstitialAd interstitialAd, bool isPrecache);

		// @optional -(void)interstitialAd:(APDInterstitialAd * _Nonnull)interstitialAd didFailToLoadWithError:(NSError * _Nonnull)error;
		[Export("interstitialAd:didFailToLoadWithError:")]
		void InterstitialAd(APDInterstitialAd interstitialAd, NSError error);

		// @optional -(void)interstitialAdDidAppear:(APDInterstitialAd * _Nonnull)interstitialAd;
		[Export("interstitialAdDidAppear:")]
		void InterstitialAdDidAppear(APDInterstitialAd interstitialAd);

		// @optional -(void)interstitialAdDidDisappear:(APDInterstitialAd * _Nonnull)interstitialAd;
		[Export("interstitialAdDidDisappear:")]
		void InterstitialAdDidDisappear(APDInterstitialAd interstitialAd);

		// @optional -(void)interstitialAd:(APDInterstitialAd * _Nonnull)interstitialAd didFailToPresentWithError:(NSError * _Nonnull)error;
		[Export("interstitialAd:didFailToPresentWithError:")]
		void InterstitialAdDidFailToPresentWithError(APDInterstitialAd interstitialAd, NSError error);

		// @optional -(void)interstitialAdDidRecieveTapAction:(APDInterstitialAd * _Nonnull)interstitialAd;
		[Export("interstitialAdDidRecieveTapAction:")]
		void InterstitialAdDidRecieveTapAction(APDInterstitialAd interstitialAd);

		// @optional -(void)interstitialAdDidExpire:(APDInterstitialAd * _Nonnull)interstitialAd;
		[Export("interstitialAdDidExpire:")]
		void InterstitialAdDidExpire(APDInterstitialAd interstitialAd);
	}

	// @interface APDInterstitialAd : NSObject
	[BaseType(typeof(NSObject))]
	interface APDInterstitialAd
	{
		[Wrap("WeakDelegate")]
		[NullAllowed]
		APDInterstitalAdDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<APDInterstitalAdDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, weak) APDSdk * _Nullable customSdk;
		[NullAllowed, Export("customSdk", ArgumentSemantic.Weak)]
		APDSdk CustomSdk { get; set; }

		// @property (readonly, getter = isReady, assign, nonatomic) BOOL ready;
		[Export("ready")]
		bool Ready { [Bind("isReady")] get; }

		// @property (assign, nonatomic) BOOL autocache;
		[Export("autocache")]
		bool Autocache { get; set; }

		// @property (readonly, assign, nonatomic) BOOL hasBeenPresented;
		[Export("hasBeenPresented")]
		bool HasBeenPresented { get; }

		// +(instancetype _Nonnull)interstitialWithSdk:(APDSdk * _Nullable)sdk delegate:(id<APDInterstitalAdDelegate> _Nullable)delegate autocache:(BOOL)autocache;
		[Static]
		[Export("interstitialWithSdk:delegate:autocache:")]
		APDInterstitialAd InterstitialWithSdk([NullAllowed] APDSdk sdk, [NullAllowed] APDInterstitalAdDelegate @delegate, bool autocache);

		// -(void)loadAd;
		[Export("loadAd")]
		void LoadAd();

		// -(void)presentFromViewController:(UIViewController * _Nonnull)viewController placement:(NSString * _Nonnull)placement;
		[Export("presentFromViewController:placement:")]
		void PresentFromViewController(UIViewController viewController, string placement);
	}

	// @interface APDMRECView : APDBannerView
	[BaseType(typeof(APDBannerView))]
	interface APDMRECView
	{
	}

	// @interface APDSdk : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface APDSdk
	{
		// +(instancetype _Nonnull)sharedSdkWithApiKey:(NSString * _Nonnull)apiKey;
		[Static]
		[Export("sharedSdkWithApiKey:")]
		APDSdk SharedSdkWithApiKey(string apiKey);

		// +(instancetype _Nonnull)sharedSdk;
		[Static]
		[Export("sharedSdk")]
		APDSdk SharedSdk();

		// -(void)setFramework:(APDFramework)framework version:(NSString * _Nullable)version;
		[Export("setFramework:version:")]
		void SetFramework(APDFramework framework, [NullAllowed] string version);

		// -(void)setUserConsent:(BOOL)userConsent;
		[Export("setUserConsent:")]
		void SetUserConsent(bool userConsent);

		// -(void)setExtras:(NSDictionary<NSString *,id> * _Nullable)extras;
		[Export("setExtras:")]
		void SetExtras([NullAllowed] NSDictionary<NSString, NSObject> extras);

		// -(void)initializeForAdTypes:(APDAdType)adTypes;
		[Export("initializeForAdTypes:")]
		void InitializeForAdTypes(APDAdType adTypes);

		// -(BOOL)isInitializedForAdType:(APDAdType)adType;
		[Export("isInitializedForAdType:")]
		bool IsInitializedForAdType(APDAdType adType);

		// -(void)setTestingMode:(BOOL)enabled;
		[Export("setTestingMode:")]
		void SetTestingMode(bool enabled);

		// -(void)setUserInfo:(APDUserInfo * _Nonnull)userInfo;
		[Export("setUserInfo:")]
		void SetUserInfo(APDUserInfo userInfo);

		// -(void)setSegmentFilter:(NSDictionary<NSString *,id> * _Nonnull)segmentFilter __attribute__((deprecated("This method is deprecated. Use -setCustomState: instead")));
		[Export("setSegmentFilter:")]
		void SetSegmentFilter(NSDictionary<NSString, NSObject> segmentFilter);

		// -(void)setCustomState:(NSDictionary<NSString *,id> * _Nonnull)customState;
		[Export("setCustomState:")]
		void SetCustomState(NSDictionary<NSString, NSObject> customState);

		// +(void)setLogLevel:(APDLogLevel)logLevel;
		[Static]
		[Export("setLogLevel:")]
		void SetLogLevel(APDLogLevel logLevel);

		// -(void)setLocationTracking:(BOOL)enabled;
		[Export("setLocationTracking:")]
		void SetLocationTracking(bool enabled);

		// -(void)setChildDirectedTreatment:(BOOL)childDirectedTreatment;
		[Export("setChildDirectedTreatment:")]
		void SetChildDirectedTreatment(bool childDirectedTreatment);

		// -(APDFramework)framework;
		[Export("framework")]
		APDFramework Framework { get; }

		// -(NSString * _Nullable)frameworkVersion;
		[NullAllowed, Export("frameworkVersion")]
		string FrameworkVersion { get; }

		// -(NSString * _Nullable)pluginVersion;
		// -(void)setPluginVersion:(NSString * _Nonnull)pluginVersion;
		[NullAllowed, Export("pluginVersion")]
		string PluginVersion { get; set; }

		// -(NSNumber * _Nonnull)segmentId;
		[Export("segmentId")]
		NSNumber SegmentId { get; }
	}

	// @interface InAppPurchase (APDSdk)
	[Category]
	[BaseType(typeof(APDSdk))]
	interface APDSdk_InAppPurchase
	{
		// -(void)trackInAppPurchase:(NSNumber * _Nonnull)amount currency:(NSString * _Nonnull)currency;
		[Export("trackInAppPurchase:currency:")]
		void TrackInAppPurchase(NSNumber amount, string currency);
	}

	

	// @interface Appodeal : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface Appodeal
	{
		// +(NSArray<NSString *> * _Nonnull)registeredNetworkNames;
		[Static]
		[Export("registeredNetworkNames")]
		string[] RegisteredNetworkNames { get; }

		// +(void)disableNetworks:(NSArray<NSString *> * _Nullable)networks;
		[Static]
		[Export("disableNetworks:")]
		void DisableNetworks([NullAllowed] string[] networks);

		// +(void)disableNetworks:(NSArray<NSString *> * _Nullable)networks forAdType:(AppodealAdType)adType;
		[Static]
		[Export("disableNetworks:forAdType:")]
		void DisableNetworks([NullAllowed] string[] networks, AppodealAdType adType);

		// +(void)disableNetwork:(NSString * _Nonnull)networkName;
		[Static]
		[Export("disableNetwork:")]
		void DisableNetwork(string networkName);

		// +(void)disableNetworkForAdType:(AppodealAdType)adType name:(NSString * _Nonnull)networkName;
		[Static]
		[Export("disableNetworkForAdType:name:")]
		void DisableNetworkForAdType(AppodealAdType adType, string networkName);

		// +(double)predictedEcpmForAdType:(AppodealAdType)type;
		[Static]
		[Export("predictedEcpmForAdType:")]
		double PredictedEcpmForAdType(AppodealAdType type);

		// +(void)setLocationTracking:(BOOL)enabled;
		[Static]
		[Export("setLocationTracking:")]
		void SetLocationTracking(bool enabled);

		// +(void)setAutocache:(BOOL)autocache types:(AppodealAdType)types;
		[Static]
		[Export("setAutocache:types:")]
		void SetAutocache(bool autocache, AppodealAdType types);

		// +(BOOL)isAutocacheEnabled:(AppodealAdType)types;
		[Static]
		[Export("isAutocacheEnabled:")]
		bool IsAutocacheEnabled(AppodealAdType types);

		// +(void)initializeWithApiKey:(NSString * _Nonnull)apiKey types:(AppodealAdType)types hasConsent:(BOOL)consent;
		[Static]
		[Export("initializeWithApiKey:types:hasConsent:")]
		void InitializeWithApiKey(string apiKey, AppodealAdType types, bool consent);

		// +(void)initializeWithApiKey:(NSString * _Nonnull)apiKey types:(AppodealAdType)types;
		[Static]
		[Export("initializeWithApiKey:types:")]
		void InitializeWithApiKey(string apiKey, AppodealAdType types);

		// +(void)setTriggerPrecacheCallbacks:(BOOL)shouldTrigger;
		[Static]
		[Export("setTriggerPrecacheCallbacks:")]
		void SetTriggerPrecacheCallbacks(bool shouldTrigger);

		// +(BOOL)isInitalizedForAdType:(AppodealAdType)type;
		[Static]
		[Export("isInitalizedForAdType:")]
		bool IsInitalizedForAdType(AppodealAdType type);

		// +(void)setLogLevel:(APDLogLevel)logLevel;
		[Static]
		[Export("setLogLevel:")]
		void SetLogLevel(APDLogLevel logLevel);

		// +(void)setFramework:(APDFramework)framework version:(NSString * _Nullable)version;
		[Static]
		[Export("setFramework:version:")]
		void SetFramework(APDFramework framework, [NullAllowed] string version);

		// +(void)setExtras:(NSDictionary<NSString *,id> * _Nullable)extras;
		[Static]
		[Export("setExtras:")]
		void SetExtras([NullAllowed] NSDictionary<NSString, NSObject> extras);

		// +(void)setActivityDelegate:(id<APDActivityDelegate> _Nullable)activityDelegate;
		[Static]
		[Export("setActivityDelegate:")]
		void SetActivityDelegate([NullAllowed] APDActivityDelegate activityDelegate);

		// +(void)setInterstitialDelegate:(id<AppodealInterstitialDelegate> _Nullable)interstitialDelegate;
		[Static]
		[Export("setInterstitialDelegate:")]
		void SetInterstitialDelegate([NullAllowed] AppodealInterstitialDelegate interstitialDelegate);

		// +(void)setBannerDelegate:(id<AppodealBannerDelegate> _Nullable)bannerDelegate;
		[Static]
		[Export("setBannerDelegate:")]
		void SetBannerDelegate([NullAllowed] AppodealBannerDelegate bannerDelegate);

		// +(void)setRewardedVideoDelegate:(id<AppodealRewardedVideoDelegate> _Nullable)rewardedVideoDelegate;
		[Static]
		[Export("setRewardedVideoDelegate:")]
		void SetRewardedVideoDelegate([NullAllowed] AppodealRewardedVideoDelegate rewardedVideoDelegate);

		// +(void)setNonSkippableVideoDelegate:(id<AppodealNonSkippableVideoDelegate> _Nullable)nonSkippableVideoDelegate;
		[Static]
		[Export("setNonSkippableVideoDelegate:")]
		void SetNonSkippableVideoDelegate([NullAllowed] AppodealNonSkippableVideoDelegate nonSkippableVideoDelegate);

		// +(void)setPreferredBannerAdSize:(APDUnitSize)adSize;
		[Static]
		[Export("setPreferredBannerAdSize:")]
		void SetPreferredBannerAdSize(CGSize adSize);

		// +(UIView * _Nullable)banner;
		[Static]
		[NullAllowed, Export("banner")]
		UIView Banner { get; }

		// +(BOOL)showAd:(AppodealShowStyle)style rootViewController:(UIViewController * _Nullable)rootViewController;
		[Static]
		[Export("showAd:rootViewController:")]
		bool ShowAd(AppodealShowStyle style, [NullAllowed] UIViewController rootViewController);

		// +(BOOL)showAd:(AppodealShowStyle)style forPlacement:(NSString * _Nonnull)placement rootViewController:(UIViewController * _Nullable)rootViewController;
		[Static]
		[Export("showAd:forPlacement:rootViewController:")]
		bool ShowAd(AppodealShowStyle style, string placement, [NullAllowed] UIViewController rootViewController);

		// +(BOOL)canShow:(AppodealAdType)type forPlacement:(NSString * _Nonnull)placement;
		[Static]
		[Export("canShow:forPlacement:")]
		bool CanShow(AppodealAdType type, string placement);

		// +(id<APDReward> _Nonnull)rewardForPlacement:(NSString * _Nonnull)placement;
		[Static]
		[Export("rewardForPlacement:")]
		APDReward RewardForPlacement(string placement);

		// +(void)cacheAd:(AppodealAdType)type;
		[Static]
		[Export("cacheAd:")]
		void CacheAd(AppodealAdType type);

		// +(void)hideBanner;
		[Static]
		[Export("hideBanner")]
		void HideBanner();

		// +(void)setTestingEnabled:(BOOL)testingEnabled;
		[Static]
		[Export("setTestingEnabled:")]
		void SetTestingEnabled(bool testingEnabled);

		// +(void)trackInAppPurchase:(NSNumber * _Nonnull)amount currency:(NSString * _Nonnull)currency;
		[Static]
		[Export("trackInAppPurchase:currency:")]
		void TrackInAppPurchase(NSNumber amount, string currency);

		// +(NSString * _Nonnull)getVersion;
		[Static]
		[Export("getVersion")]
		string Version { get; }

		// +(BOOL)isReadyForShowWithStyle:(AppodealShowStyle)showStyle;
		[Static]
		[Export("isReadyForShowWithStyle:")]
		bool IsReadyForShowWithStyle(AppodealShowStyle showStyle);

		// +(BOOL)isPrecacheAd:(AppodealAdType)adType;
		[Static]
		[Export("isPrecacheAd:")]
		bool IsPrecacheAd(AppodealAdType adType);

		// +(void)setSegmentFilter:(NSDictionary * _Nonnull)segmentFilter __attribute__((deprecated("This method is deprecated. Use +setCustomState: instead")));
		[Static]
		[Export("setSegmentFilter:")]
		void SetSegmentFilter(NSDictionary segmentFilter);

		// +(void)setCustomState:(NSDictionary * _Nonnull)customState;
		[Static]
		[Export("setCustomState:")]
		void SetCustomState(NSDictionary customState);

		// +(void)setSmartBannersEnabled:(BOOL)smartBannerEnabled;
		[Static]
		[Export("setSmartBannersEnabled:")]
		void SetSmartBannersEnabled(bool smartBannerEnabled);

		// +(void)setBannerBackgroundVisible:(BOOL)bannerBackgroundVisible __attribute__((deprecated("This method is deprecated and will be removed in next release")));
		[Static]
		[Export("setBannerBackgroundVisible:")]
		void SetBannerBackgroundVisible(bool bannerBackgroundVisible);

		// +(void)setBannerAnimationEnabled:(BOOL)bannerAnimationEnabled;
		[Static]
		[Export("setBannerAnimationEnabled:")]
		void SetBannerAnimationEnabled(bool bannerAnimationEnabled);

		// +(void)setBannerLeftRotationAngleDegrees:(CGFloat)leftRotationAngleDegrees rightRotationAngleDegrees:(CGFloat)rightRotationAngleDegrees;
		[Static]
		[Export("setBannerLeftRotationAngleDegrees:rightRotationAngleDegrees:")]
		void SetBannerLeftRotationAngleDegrees(nfloat leftRotationAngleDegrees, nfloat rightRotationAngleDegrees);

		// +(void)setChildDirectedTreatment:(BOOL)childDirectedTreatment;
		[Static]
		[Export("setChildDirectedTreatment:")]
		void SetChildDirectedTreatment(bool childDirectedTreatment);

		// +(void)updateConsent:(BOOL)consent;
		[Static]
		[Export("updateConsent:")]
		void UpdateConsent(bool consent);

		// +(APDFramework)framework;
		[Static]
		[Export("framework")]
		APDFramework Framework { get; }

		// +(NSString * _Nullable)frameworkVersion;
		[Static]
		[NullAllowed, Export("frameworkVersion")]
		string FrameworkVersion { get; }

		// +(NSString * _Nullable)pluginVersion;
		// +(void)setPluginVersion:(NSString * _Nonnull)pluginVersion;
		[Static]
		[NullAllowed, Export("pluginVersion")]
		string PluginVersion { get; set; }

		// +(NSNumber * _Nonnull)segmentId;
		[Static]
		[Export("segmentId")]
		NSNumber SegmentId { get; }
	}

	// @interface UserMetadata (Appodeal)
	[Category]
	[BaseType(typeof(Appodeal))]
	interface Appodeal_UserMetadata
	{
		// +(void)setUserId:(NSString * _Nonnull)userId;
		[Static]
		[Export("setUserId:")]
		void SetUserId(string userId);

		// +(void)setUserAge:(NSUInteger)age;
		[Static]
		[Export("setUserAge:")]
		void SetUserAge(nuint age);

		// +(void)setUserGender:(AppodealUserGender)gender;
		[Static]
		[Export("setUserGender:")]
		void SetUserGender(AppodealUserGender gender);
	}




	// @protocol APDUserInfo <NSObject>
	/*
	  Check whether adding [Model] to this declaration is appropriate.
	  [Model] is used to generate a C# class that implements this protocol,
	  and might be useful for protocols that consumers are supposed to implement,
	  since consumers can subclass the generated class instead of implementing
	  the generated interface. If consumers are not supposed to implement this
	  protocol, then [Model] is redundant and will generate code that will never
	  be used.
	*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface APDUserInfo
	{
		// @required @property (readonly, assign, nonatomic) NSUInteger age;
		[Abstract]
		[Export("age")]
		nuint Age { get; }

		// @required @property (readonly, assign, nonatomic) APDUserGender gender;
		[Abstract]
		[Export("gender", ArgumentSemantic.Assign)]
		APDUserGender Gender { get; }

		// @required @property (readonly, copy, nonatomic) NSString * _Nullable userId;
		[Abstract]
		[NullAllowed, Export("userId")]
		string UserId { get; }

		// @required @property (readonly, copy, nonatomic) NSDictionary * _Nullable ext;
		[Abstract]
		[NullAllowed, Export("ext", ArgumentSemantic.Copy)]
		NSDictionary Ext { get; }
	}

	// @protocol APDReward <NSObject>
	/*
	  Check whether adding [Model] to this declaration is appropriate.
	  [Model] is used to generate a C# class that implements this protocol,
	  and might be useful for protocols that consumers are supposed to implement,
	  since consumers can subclass the generated class instead of implementing
	  the generated interface. If consumers are not supposed to implement this
	  protocol, then [Model] is redundant and will generate code that will never
	  be used.
	*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface APDReward
	{
		// @required @property (readonly, copy, nonatomic) NSString * _Nullable currencyName;
		[Abstract]
		[NullAllowed, Export("currencyName")]
		string CurrencyName { get; }

		// @required @property (readonly, assign, nonatomic) float amount;
		[Abstract]
		[Export("amount")]
		float Amount { get; }
	}


	// @protocol APDRewardedVideoDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDRewardedVideoDelegate
	{
		// @optional -(void)rewardedVideoDidLoad:(APDRewardedVideo * _Nonnull)rewardedVideo isPrecache:(BOOL)isPrecache;
		[Export("rewardedVideoDidLoad:isPrecache:")]
		void RewardedVideoDidLoad(APDRewardedVideo rewardedVideo, bool isPrecache);

		// @optional -(void)rewardedVideo:(APDRewardedVideo * _Nonnull)rewardedVideo didFailToLoadWithError:(NSError * _Nonnull)error;
		[Export("rewardedVideo:didFailToLoadWithError:")]
		void RewardedVideo(APDRewardedVideo rewardedVideo, NSError error);

		// @optional -(void)rewardedVideoDidExpired:(APDRewardedVideo * _Nonnull)rewardedVideo;
		[Export("rewardedVideoDidExpired:")]
		void RewardedVideoDidExpired(APDRewardedVideo rewardedVideo);

		// @optional -(void)rewardedVideoDidAppear:(APDRewardedVideo * _Nonnull)rewardedVideo;
		[Export("rewardedVideoDidAppear:")]
		void RewardedVideoDidAppear(APDRewardedVideo rewardedVideo);

		// @optional -(void)rewardedVideoDidDisappear:(APDRewardedVideo * _Nonnull)rewardedVideo wasFullyWatched:(BOOL)wasFullyWatched;
		[Export("rewardedVideoDidDisappear:wasFullyWatched:")]
		void RewardedVideoDidDisappear(APDRewardedVideo rewardedVideo, bool wasFullyWatched);

		// @optional -(void)rewardedVideoDidRecieveTapAction:(APDRewardedVideo * _Nonnull)rewardedVideo;
		[Export("rewardedVideoDidRecieveTapAction:")]
		void RewardedVideoDidRecieveTapAction(APDRewardedVideo rewardedVideo);

		// @optional -(void)rewardedVideo:(APDRewardedVideo * _Nonnull)rewardedVideo didFinishWithReward:(id<APDReward> _Nonnull)reward;
		[Export("rewardedVideo:didFinishWithReward:")]
		void RewardedVideo(APDRewardedVideo rewardedVideo, APDReward reward);

		// @optional -(void)rewardedVideo:(APDRewardedVideo * _Nonnull)rewardedVideo didFailToPresentWithError:(NSError * _Nonnull)error;
		[Export("rewardedVideo:didFailToPresentWithError:")]
		void RewardedVideoDidFailToPresentWithError(APDRewardedVideo rewardedVideo, NSError error);
	}

	// @interface APDRewardedVideo : NSObject
	[BaseType(typeof(NSObject))]
	interface APDRewardedVideo
	{
		[Wrap("WeakDelegate")]
		[NullAllowed]
		APDRewardedVideoDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<APDRewardedVideoDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, weak) APDSdk * _Nullable customSdk;
		[NullAllowed, Export("customSdk", ArgumentSemantic.Weak)]
		APDSdk CustomSdk { get; set; }

		// @property (readonly, assign, nonatomic) double predictedEcpm;
		[Export("predictedEcpm")]
		double PredictedEcpm { get; }

		// @property (assign, nonatomic) BOOL autocache;
		[Export("autocache")]
		bool Autocache { get; set; }

		// @property (readonly, getter = isReady, assign, nonatomic) BOOL ready;
		[Export("ready")]
		bool Ready { [Bind("isReady")] get; }

		// +(instancetype _Nonnull)rewardedVideoWithSdk:(APDSdk * _Nullable)sdk delegate:(id<APDRewardedVideoDelegate> _Nullable)delegate autocache:(BOOL)autocache;
		[Static]
		[Export("rewardedVideoWithSdk:delegate:autocache:")]
		APDRewardedVideo RewardedVideoWithSdk([NullAllowed] APDSdk sdk, [NullAllowed] APDRewardedVideoDelegate @delegate, bool autocache);

		// -(void)loadAd;
		[Export("loadAd")]
		void LoadAd();

		// -(void)presentFromViewController:(UIViewController * _Nonnull)viewController placement:(NSString * _Nonnull)placement;
		[Export("presentFromViewController:placement:")]
		void PresentFromViewController(UIViewController viewController, string placement);

		// -(id<APDReward> _Nonnull)rewardForPlacement:(NSString * _Nonnull)placement;
		[Export("rewardForPlacement:")]
		APDReward RewardForPlacement(string placement);
	}


	// @protocol APDNativeAdView <NSObject>
	/*
	  Check whether adding [Model] to this declaration is appropriate.
	  [Model] is used to generate a C# class that implements this protocol,
	  and might be useful for protocols that consumers are supposed to implement,
	  since consumers can subclass the generated class instead of implementing
	  the generated interface. If consumers are not supposed to implement this
	  protocol, then [Model] is redundant and will generate code that will never
	  be used.
	*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface APDNativeAdView
	{
		// @required -(UILabel * _Nonnull)titleLabel;
		[Abstract]
		[Export("titleLabel")]
		UILabel TitleLabel { get; }

		// @required -(UILabel * _Nonnull)callToActionLabel;
		[Abstract]
		[Export("callToActionLabel")]
		UILabel CallToActionLabel { get; }

		// @optional -(UILabel * _Nonnull)descriptionLabel;
		[Export("descriptionLabel")]
		UILabel DescriptionLabel { get; }

		// @optional -(UIImageView * _Nonnull)iconView;
		[Export("iconView")]
		UIImageView IconView { get; }

		// @optional -(UIView * _Nonnull)mediaContainerView;
		[Export("mediaContainerView")]
		UIView MediaContainerView { get; }

		// @optional -(UILabel * _Nonnull)contentRatingLabel;
		[Export("contentRatingLabel")]
		UILabel ContentRatingLabel { get; }

		// @optional -(UIView * _Nonnull)adChoicesView;
		[Export("adChoicesView")]
		UIView AdChoicesView { get; }

		// @optional -(void)setRating:(NSNumber * _Nonnull)rating;
		[Export("setRating:")]
		void SetRating(NSNumber rating);

		// @optional +(UINib * _Nonnull)nib;
		[Static]
		[Export("nib")]
		UINib Nib { get; }
	}

	// @protocol APDNativeAdPresentationDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDNativeAdPresentationDelegate
	{
		// @optional -(void)nativeAdDidExpired:(APDNativeAd * _Nonnull)nativeAd;
		[Export("nativeAdDidExpired:")]
		void NativeAdDidExpired(APDNativeAd nativeAd);

		// @optional -(void)nativeAdWillLogImpression:(APDNativeAd * _Nonnull)nativeAd;
		[Export("nativeAdWillLogImpression:")]
		void NativeAdWillLogImpression(APDNativeAd nativeAd);

		// @optional -(void)nativeAdWillLogUserInteraction:(APDNativeAd * _Nonnull)nativeAd;
		[Export("nativeAdWillLogUserInteraction:")]
		void NativeAdWillLogUserInteraction(APDNativeAd nativeAd);
	}

	// @interface APDNativeAd : NSObject
	[BaseType(typeof(NSObject))]
	interface APDNativeAd
	{
		[Wrap("WeakDelegate")]
		[NullAllowed]
		APDNativeAdPresentationDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<APDNativeAdPresentationDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
		[Export("title")]
		string Title { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull descriptionText;
		[Export("descriptionText")]
		string DescriptionText { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull callToActionText;
		[Export("callToActionText")]
		string CallToActionText { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable contentRating;
		[NullAllowed, Export("contentRating")]
		string ContentRating { get; }

		// @property (readonly, copy, nonatomic) NSNumber * _Nullable starRating;
		[NullAllowed, Export("starRating", ArgumentSemantic.Copy)]
		NSNumber StarRating { get; }

		// @property (readonly, copy, nonatomic) APDImage * _Nullable mainImage;
		[NullAllowed, Export("mainImage", ArgumentSemantic.Copy)]
		APDImage MainImage { get; }

		// @property (readonly, copy, nonatomic) APDImage * _Nullable iconImage;
		[NullAllowed, Export("iconImage", ArgumentSemantic.Copy)]
		APDImage IconImage { get; }

		// @property (readonly, nonatomic, strong) UIView * _Nullable adChoicesView;
		[NullAllowed, Export("adChoicesView", ArgumentSemantic.Strong)]
		UIView AdChoicesView { get; }

		// @property (readonly, getter = isContainsVideo, nonatomic) BOOL containsVideo;
		[Export("containsVideo")]
		bool ContainsVideo { [Bind("isContainsVideo")] get; }

		// @property (readonly, assign, nonatomic) double predictedEcpm;
		[Export("predictedEcpm")]
		double PredictedEcpm { get; }

		// -(UIView<APDNativeAdView> * _Nullable)getAdViewForController:(UIViewController * _Nonnull)controller;
		[Export("getAdViewForController:")]
		[return: NullAllowed]
		APDNativeAdView GetAdViewForController(UIViewController controller);

		// -(BOOL)canShowAdForPlacement:(NSString * _Nonnull)placement;
		[Export("canShowAdForPlacement:")]
		bool CanShowAdForPlacement(string placement);

		// -(UIView<APDNativeAdView> * _Nullable)getAdViewForPlacement:(NSString * _Nonnull)placement withRootViewController:(UIViewController * _Nonnull)controller error:(NSError * _Nullable * _Nullable)error;
		[Export("getAdViewForPlacement:withRootViewController:error:")]
		[return: NullAllowed]
		APDNativeAdView GetAdViewForPlacement(string placement, UIViewController controller, [NullAllowed] out NSError error);
	}

	// @interface APDNativeAdSettings : NSObject
	[BaseType(typeof(NSObject))]
	interface APDNativeAdSettings
	{
		// @property (assign, nonatomic) Class<APDNativeAdView> _Nonnull adViewClass;
		[Export("adViewClass", ArgumentSemantic.Assign)]
		APDNativeAdView AdViewClass { get; set; }

		// @property (assign, nonatomic) APDNativeAdType type;
		[Export("type", ArgumentSemantic.Assign)]
		APDNativeAdType Type { get; set; }

		// @property (assign, nonatomic) APDNativeResourceAutocacheMask autocacheMask;
		[Export("autocacheMask", ArgumentSemantic.Assign)]
		APDNativeResourceAutocacheMask AutocacheMask { get; set; }

		// @property (nonatomic, strong) NSURL * _Nullable nativeMediaViewPlaceholder;
		[NullAllowed, Export("nativeMediaViewPlaceholder", ArgumentSemantic.Strong)]
		NSUrl NativeMediaViewPlaceholder { get; set; }

		// +(instancetype _Nonnull)defaultSettings;
		[Static]
		[Export("defaultSettings")]
		APDNativeAdSettings DefaultSettings();
	}


	// @protocol APDNativeAdQueueDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface APDNativeAdQueueDelegate
	{
		// @optional -(void)adQueueAdIsAvailable:(APDNativeAdQueue * _Nonnull)adQueue ofCount:(NSUInteger)count;
		[Export("adQueueAdIsAvailable:ofCount:")]
		void AdQueueAdIsAvailable(APDNativeAdQueue adQueue, nuint count);

		// @optional -(void)adQueue:(APDNativeAdQueue * _Nonnull)adQueue failedWithError:(NSError * _Nonnull)error;
		[Export("adQueue:failedWithError:")]
		void AdQueue(APDNativeAdQueue adQueue, NSError error);
	}

	// @interface APDNativeAdQueue : NSObject
	[BaseType(typeof(NSObject))]
	interface APDNativeAdQueue
	{
		[Wrap("WeakDelegate")]
		[NullAllowed]
		APDNativeAdQueueDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<APDNativeAdQueueDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, strong) APDNativeAdSettings * _Nonnull settings;
		[Export("settings", ArgumentSemantic.Strong)]
		APDNativeAdSettings Settings { get; set; }

		// @property (readonly, assign, nonatomic) NSInteger currentAdCount;
		[Export("currentAdCount")]
		nint CurrentAdCount { get; }

		// @property (nonatomic, strong) NSString * _Nullable placement;
		[NullAllowed, Export("placement", ArgumentSemantic.Strong)]
		string Placement { get; set; }

		// @property (assign, nonatomic) BOOL autocache;
		[Export("autocache")]
		bool Autocache { get; set; }

		// @property (readonly, assign, nonatomic) NSInteger precacheAdCount;
		[Export("precacheAdCount")]
		nint PrecacheAdCount { get; }

		// @property (readonly, assign, nonatomic) BOOL containsSuitableAdsForCurrentPlacement;
		[Export("containsSuitableAdsForCurrentPlacement")]
		bool ContainsSuitableAdsForCurrentPlacement { get; }

		// @property (nonatomic, weak) APDSdk * _Nullable customSdk;
		[NullAllowed, Export("customSdk", ArgumentSemantic.Weak)]
		APDSdk CustomSdk { get; set; }

		// +(instancetype _Nonnull)nativeAdQueueWithSdk:(APDSdk * _Nullable)sdk settings:(APDNativeAdSettings * _Nonnull)settings delegate:(id<APDNativeAdQueueDelegate> _Nullable)delegate autocache:(BOOL)autocache;
		[Static]
		[Export("nativeAdQueueWithSdk:settings:delegate:autocache:")]
		APDNativeAdQueue NativeAdQueueWithSdk([NullAllowed] APDSdk sdk, APDNativeAdSettings settings, [NullAllowed] APDNativeAdQueueDelegate @delegate, bool autocache);

		// -(void)setMaxAdSize:(NSInteger)adSize __attribute__((deprecated("Configure ad queue size in dashboard")));
		[Export("setMaxAdSize:")]
		void SetMaxAdSize(nint adSize);

		// -(void)loadAd;
		[Export("loadAd")]
		void LoadAd();

		// -(void)pause;
		[Export("pause")]
		void Pause();

		// -(NSArray<__kindof APDNativeAd *> * _Nonnull)getNativeAdsOfCount:(NSInteger)count;
		[Export("getNativeAdsOfCount:")]
		APDNativeAd[] GetNativeAdsOfCount(nint count);
	}
}